#########
# Antigen
#########
source $HOME/.antigen/antigen.zsh

antigen use oh-my-zsh

antigen bundles <<EOBUNDLES
    # oh-my-zsh plugins
    archlinux
    colored-man-pages
    extract
    git
    python
    systemd
    vi-mode

    zsh-users/zsh-completions src
    zsh-users/zsh-history-substring-search

    # Fish-like command coloring - this needs to be the last bundle
    zsh-users/zsh-syntax-highlighting
EOBUNDLES

antigen theme prikhi/molokai-powerline-zsh molokai-powerline

antigen apply

# Modules
autoload -U zcalc
autoload -U compinit && compinit
autoload -U bashcompinit && bashcompinit

# Options
zstyle ':completion:*' menu select
# Allow completions for commands to apply to their aliases as well
unsetopt COMPLETE_ALIASES
# Wait 10 seconds before allowing globbed deletes
setopt RM_STAR_WAIT
# Allow background jobs to continue on exit
setopt AUTO_CONTINUE
# Enable recursive & negation globbing
setopt EXTENDED_GLOB
# Allow file completions for all command flags
setopt MAGIC_EQUAL_SUBST

#########################
# Environmental Variables
#########################
# Use neovim but fallback to vim if not isn't installed
if type "nvim" > /dev/null; then
    export EDITOR="nvim"
else
    export EDITOR="vim"
fi
export PAGER="less"
export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
export LESS="-R"
export VBOX_USB=usbfs
export PATH=~/.bin:~/.local/bin:~/.cabal/bin:$PATH
export NNTPSERVER="news.gmane.org"

#########
# Aliases
#########
# Vim shortcuts
alias v="$EDITOR"
alias vd="vimdiff"
alias sv="EDITOR=vim sudoedit"
alias svd="EDITOR=vimdiff sudoedit"
alias svim="EDITOR=vim sudoedit"
alias svimdiff="EDITOR=vimdiff sudoedit"

alias s="sudo"
alias o="xdg-open"
alias ra="ranger"
alias zc="zcalc"
alias am="alsamixer"
alias sz="source ~/.zshrc"
alias rs="rsync -avhz --progress"
alias yt='youtube-dl -a vids.txt'
alias srv="python -m http.server"
alias hkl="hklaunch"
alias open="xdg-open"
alias wine32="WINEPREFIX=~/.wine32 WINEARCH=win32 wine"
alias xpaste="xsel --clipboard --output"
alias mpaste='mpv $(xpaste)'

# Launch and/or Open Screen Sessions
alias ssplit="~/.bin/start_split; screen -x split"
alias irc="~/.bin/start_irc; screen -x irc"
alias torrent="~/.bin/start_torrent; screen -x torrent"
alias work="~/.bin/start_work; screen -x work"

# Edit config files
alias zshrc="v ~/.zshrc"
alias vimrc="v ~/.vimrc"
alias awesomerc="v ~/.config/awesome/rc.lua"
alias pentarc="v ~/.pentadactylrc"
alias dfiles="cd ~/.dotfiles"
alias notes="cd ~/Documents/Notes"

# SSH
alias cerberus="ssh admin@cerberus"
alias aphrodite="ssh prikhi@aphrodite.acorn"
alias vishnu="ssh prikhi@vishnu.acorn"
alias adonis="ssh prikhi@adonis.acorn"
alias slacktest="ssh prikhi@SlackTesting.acorn"
alias sese="ssh sese"
alias acorn="ssh acorn"
alias vps="ssh pavan@sleepanarchy.com -i ~/.ssh/id_rsa"
alias ficftp="ssh fic"
alias fic="ssh ficweb"
alias fecvps="ssh fec"

# Safety First!
alias rm="rm -i"
alias mv="mv -i"
alias cp="cp -i"

# Arch linux networking - netctl
alias nc-start="sudo netctl start"
alias nc-stop="sudo netctl stop"
alias nc-restart="sudo netctl restart"
alias nc-status="sudo netctl status"
alias wifi-menu="sudo wifi-menu && sudo mount -a"

# SystemD User Commands
alias scu="systemctl --user"
alias scu-start="systemctl --user start"
alias scu-stop="systemctl --user stop"
alias scu-restart="systemctl --user restart"
alias scu-status="systemctl --user status"
alias scu-enable="systemctl --user enable"
alias scu-disable="systemctl --user disable"

# Arch linux package management - packer/pacman
# Only download new packages, do not install them
alias pacdow='sudo pacman -Syuw'
# Synchronize with repositories before upgrading packages that are out of date
# on the local system.
alias pacupg='packer -Syu'
# Install specific package(s) from the repositories
alias pacin='packer -S'
# Display information about a given package in the repositories
alias pacrep='packer -Si'
# Search for package(s) in the repositories
alias pacreps='packer -Ss'
# Search for packages containing a file
alias pacfs='pacman -Fs'
# Update the file database
alias pacfu='sudo pacman -Fy'

# Git
alias grb='git rebase'
alias gm='git merge'

# Prettify JSON: cat x.json | pretty_json
alias pretty_json='python -m json.tool'


# Python/Django Commands
alias pyt='py.test'
alias djt='python manage.py test'   # Run Django project's tests
alias djr='python manage.py runserver 0.0.0.0:8000' # Run Server on All IPs
alias djrp='python manage.py runserver_plus 0.0.0.0:8000'
alias mcmh='make clean; make html'  # Clean and Make Sphinx Docs

# Selenium & Xvfb for headless integration testing
# Create a virtual screen on display :20 (Virtual Frame Buffer)
alias vfb='sudo Xvfb :20 -ac'
alias selenium='DISPLAY=:20 java -jar /usr/share/selenium-server/selenium-server-standalone.jar -timeout=60 -browserTimeout=60'
alias seleniumlocal='DISPLAY=:0 java -jar /usr/share/selenium-server/selenium-server-standalone.jar -timeout=60 -browserTimeout=60'

# Haskell package development/management - cabal
# These use multiple cores
alias cbj='cabal -j'
alias cbb='cbj build'
alias cbi='cbj install'
alias cbc='cabal clean'
alias cbh='cabal haddock --all'
alias cbt='cabal test -j'
alias hspec='cbt --show-details=always --test-option=--color --test-option=--fail-fast'
alias tasty='cbt --show-details=always --test-option=--color=always'
alias fcbb='cbc && cbb && cbh'  # A full Clean + Build (including docs)

# Use readline with the SML/NJ REPL
alias sml='rlwrap sml'

# C development
alias c="gcc -g -O2 -Wall -Wextra -Werror --std=c11 -pedantic         \
             -Wno-unused-parameter -Wfloat-equal -Wundef -Wshadow     \
             -Wpointer-arith -Wcast-align -Wstrict-prototypes         \
             -Wstrict-overflow=5 -Wwrite-strings -Waggregate-return   \
             -Wswitch-enum -Wconversion -Wunreachable-code -Wformat=2 \
             -Winit-self                                              \
             -ftrapv -fverbose-asm                                    \
             -D_XOPEN_SOURCE=700"
alias smi='sudo make install'
alias mmc='make maintainer-clean'
alias auconf='./autogen.sh && ./configure --bindir /usr/bin --datadir /usr/share --sysconfdir /etc'
alias aumake='auconf && make'
alias auinstall='auconf && make && sudo make install'

# Redmine CLI Client - hkredmine
# Show Issues w/ Project as 1st position argument
alias hkpi='hkredmine issues -S priority:desc,category -p'
# New Issue w/ Project as 1st position argument & open description in editor
alias hkni='hkredmine newissue -e -p'
# Others
alias hkr='hkredmine'
alias hkru='hkredmine use'
alias hkri='hkredmine issue'
alias hkris='hkredmine issues'
alias hkup='hkredmine update'
alias hkcl='hkredmine close'
alias hkca='hkredmine categories'
alias hknc='hkredmine newcategory'
alias hkve='hkredmine version'
alias hkvs='hkredmine versions'
alias hknv='hkredmine nextversion -S priority:desc,category'
alias hkst='hkredmine startwork'
alias hkrp='hkredmine pause'
alias hkrr='hkredmine resume'
alias hkstop='hkredmine stopwork'

# Show the next 2 weeks worth of reminders
alias rlist='rem -s+2 |  cut -d " " -f 1,6-'

# Translate
alias french='dict -d fd-fra-eng'

# ls colors
if [ -f ~/.dir_colors ]; then
    eval `dircolors ~/.dir_colors`
fi

# Python2 virtualenvwrapper setup
export VIRTUALENVWRAPPER_PYTHON="/usr/bin/python2.7"
if [ -f "/usr/bin/virtualenvwrapper.sh" ]; then
    source /usr/bin/virtualenvwrapper.sh
elif [ -f "/etc/bash_completion.d/virtualenvwrapper" ]; then
    source /etc/bash_completion.d/virtualenvwrapper
fi

# Setup zsh history substring search plugin
# bind UP and DOWN arrow keys
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# ALL HAIL THE HYPNOTOAD
if [ -e "/usr/bin/fortune" -a -e "/usr/bin/cowsay" ]; then
    fortune -so | cowsay -f hypnotoad
fi

# Enable custom completions
for f in $HOME/.completions/*; do
    source $f
done
complete -o bashdefault -F _hkredmine hkr


## Functions
# Copy rxvt-unicode-256color terminfo to specified remote host
push_rxvt_info () {
    infocmp rxvt-unicode-256color | ssh $1 "mkdir -p .terminfo && cat >/tmp/ti && tic /tmp/ti"
}

mysql_restore_bz2 () {
    bunzip2 < "$2" | mysql -u root -p "$1"
}
buildRunWatchKill () {
    PROGRAM="${1}"
    WATCH_DIR="${2}"
    while true; do
        PID=""
        make build
        if [ $? -eq 0 ] ; then
            echo "OK"
            if [ "$PROGRAM" ] ; then
                $PROGRAM &
                PID="$!"
                sleep 0.1
            fi
        else
            echo "FAIL"
        fi

        inotifywait -q -q -r -e 'close_write' $WATCH_DIR

        echo "CHANGED"

        if [ "$PID" ] ; then
            kill $PID
        fi

        echo "AGAIN"
    done
}



## Bindings
# Bind Ctrl-R to History Search
bindkey '^R' history-incremental-search-backward
# Bind Ctrl-W to Delete Word Backwards
bindkey '^W' backward-kill-word
# Bind ;; to Command Mode
bindkey -M viins ';;' vi-cmd-mode
# Bind Ctrl-K/Ctrl-J to go Up/Down in History
bindkey '^K' history-substring-search-up
bindkey '^J' history-substring-search-down



##### Fix for special keys (home, end, delete, etc.)
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
#####



# Run a local config if it exists
if [[ -f ~/.zshrc.local ]]; then
    source ~/.zshrc.local
fi
